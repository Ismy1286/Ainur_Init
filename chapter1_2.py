# Chapter 1.2
#
# -1. Дан список a = [1, 2, 2, 4, 11, 2, 3, 1]. Напишите код, который выведет
# список a без дубликатов.


# a = [1, 2, 2, 4, 11, 2, 3, 1]
# a = set(a)
# print(a)



# -2. Дан список a = [‘John’, ‘Anna’, ‘Raychel’, ‘Katarina’, ‘Marko’, ‘Tom’]
# Удалите из списка 0, 4 и 5 элементы списка.


# a = ['John', 'Anna', 'Raychel', 'Katarina', 'Marko', 'Tom']
# b = [5, 4, 0]
# for i in b:
#     del a[i]
# print(a)



# -3. Дан список [1, 2, 3, 4, 5, 6, 7, 8, 9]. Отсортируйте его в обратном
# порядке.


# a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# a.reverse()
# print(a)



# -4. Измените один элемент списка с любым значением на новое.


# a = ['John', 'Anna', 'Raychel', 'Katarina', 'Marko', 'Tom']
# a[2] = 'Elsa'
# print(a)



# -5. Попросить пользователя ввести слова через пробел. Отсортировать
# слова по количеству символов и вывести на экран результат.


# a = input('Введите слова через пробел: ')
# words = a.split()
# words.sort(key=len)
# print(words)



# -6. Напишите код для проверки существует ли ключ в dict.


# capitals = {'Moscow': 'Russia', 'Bishkek': 'Kyrghyzstan', 'Kiev': 'Ukraine'}
# a = input('Введите ключ для проверки: ')
# if a in capitals:
#     print('Поздравляю у Вас ключ от ' + capitals.get(a))
# else:
#     print('К сожалению Ваш ключ не подходит.')




# -7. Напишите программу для объединения двух словарей в один.


# capitals = {'Moscow': 'Russia', 'Bishkek': 'Kyrghyzstan', 'Kiev': 'Ukraine'}
# capitals2 = {'Washington': 'USA', 'Paris': 'France'}
# capitals.update(capitals2)
# print(capitals)



# -8. Напишите программу для сортировки dict по ключам.


# capitals = {'Moscow': 'Russia', 'Bishkek': 'Kyrghyzstan', 'Kiev': 'Ukraine'}
# for key in sorted(capitals):
#     print(key + ' - ' + capitals[key])



# -9. Напишите код, который проверяет пуст ли словарь.


# capitals = {'Washington': 'USA', 'Paris': 'France'}
# ab = len(capitals)
# if ab > 0:
#     print('Словарь не пуст.')
# else:
#     print('Словарь пуст.')



# -10. Создайте список. Добавьте в него 3 новых элемента. Сделайте так,
# чтобы этот список нельзя было больше изменить.


# list1 = [1, 2, 3, 4, 5, 6]
# list2 = [12, 32, 11]
# list1.extend(list2)
# list1 = (tuple, list1)
# print(list1)



# -11. Создайте программу, которая спрашивает логин и пароль. Запишите
# данные в dictionary и выведите результат.


# dict1 = {}
# a = input('Введите логин: ')
# b = input('Введите пароль: ')
# dict1[a] = b
# for i in dict1:
#     print('Ваш логин: ' + i + '.\nВаш пароль: ' + dict1[i])



# -12. Напишите программу, чтобы проверить, является ли буква гласной или согласной.
# Пример:
# Введите букву алфавита: к
# Вывод: к согласная.


# my_letter = input('Введите  букву: ')
#
# a = ['a', 'e', 'y', 'u', 'i', 'o', 'а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'е', 'ё']
# b = [element.upper() for element in a]
# a.extend(b)
#
# for i in my_letter:
#     if i.isalpha():
#         if i in a:
#             print(i + ' - гласная')
#         else:
#             print(i + ' - согласная')
#     else:
#         print('Это не буква.')



# -13. Есть корзина наполненная n количеством яблок. Так же есть x
# количество студентов. Разделите яблоки поровну между всеми
# студентами. Если студентов больше чем яблок, то оставьте их в
# корзине. Выведите в результат количество студентов, количество яблок
# и остаток в корзине.


# n = 87
# x = 23
# y = n % x
#
# print('Количество студентов - ' + str(x))
# print('Количество яблок - ' + str(n))
# print('Остаток яблок в корине - ' + str(y))



# -14. Для обустройства учебного кабинета необходимо приобрести парты.
# Количество учеников вводит пользователь. Необходимо определить
# сколько парт нужно купить, если ученики сидят по двое за одной партой.
# Так же если учеников нечетное количество, то кто-то будет сидеть один
# за партой.

# a = int(input('Введите количество учеников: '))
# b = a // 2
# if a % 2 == 1:
#     b += 1
# print('Количество необходимых парт - ' + str(b))



# -15. Напишите программу для расчета возраста собаки в человеческих
# годах. Пользователь может ввести возраст и размер (маленькая,
# средняя, крупная). Для вычисления умножте возраст собаки на 9
# человеческих лет за каждый собачий для маленьких собак;
# 10,5 лет для средних собак;
# 12,5 лет для крупных собак;


# a = int(input('Введите возраст собаки: '))
# print('Введите: \n    - 1 для маленькой собаки \n    - 2 для средней собаки \n    - 3 для большой собаки  ')
# b = int(input('Введите размер собаки: '))
# if b == 1:
#     print('Вашей собаке - ' + str(b * 9) + ' человеческих лет')
# if b == 2:
#     print('Вашей собаке - ' + str(b * 10.5) + ' человеческих лет')
# if b == 3:
#     print('Вашей собаке - ' + str(b * 12.5) + ' человеческих лет')
# if b < 1 or b > 3:
#     print('Вы ввели неправильный размер собаки')



# 16. Пользователь вводит три числа. Если все числа больше 10, то
# вывести на экран yes, иначе no.


# a = int[input('Введите возраст собаки: ')]
# 17. Дано три числа. Найти количество положительных чисел среди них.
# 18. Составить в интерпретаторе Python программу которая:
# - просит пользователя ввести целое число и присваивает его
# переменной num
# - просит пользователя ввести множитель для возведения в степень и
# присваивает его переменной step
# - проверяет истинность условия, что введенное пользователем целое
# число num меньше 100
# - если это условие ИСТИННО, то необходимо возвести число num в
# степень step (напоминаю, возведение в степень осуществляется
# оператором **) и присвоить результат переменной rezult.
# Результат вывести на печать
# - если результат проверки ЛОЖЬ, то вывести на печать сообщение:
# "Введенное вами число > 100".
# 19. Вводятся три целых числа. Определить какое из них наибольшее.
# Пусть a, b, c - переменные, которым присваиваются введенные числа, а
# переменная m в конечном итоге должна будет содержать значение
# наибольшей переменной. Тогда алгоритм программы сведется к
# следующему:
# 1. Сначала предположим, что переменная a содержит наибольшее
# значение. Присвоим его переменной m.
# 2. Если текущее значение m меньше, чем у b, то следует присвоить m
# значение b. Если это не так, то не изменять значение m.
# 3. Если текущее значение m меньше, чем у c, то присвоить m
# значение c. Иначе ничего не делать.
#
# 20. Вводятся три разных числа. Найти, какое из них является средним
# (больше одного, но меньше другого).
# Проверить, лежит ли первое число между двумя другими. При этом
# может быть два случая:
# первое больше второго и первое меньше третьего,
# первое меньше второго и первое больше третьего.
# Если ни один из вариантов не вернул истину, значит первое число не
# среднее. Тогда проверяется, не лежит ли второе число между двумя
# другими. Это может быть в двух случаях, когда
# второе больше первого и меньше третьего,
# второе меньше первого и больше третьего.
# Если эти варианты также не вернули истину, то остается только один
# вариант - посередине лежит третье число.